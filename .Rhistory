library(shinydashboard)
num <- sample(c(1,2),1)
num <- sample(c(1,2),1)
num <- sample(c(1,2),1)
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
shinyApp(ui, server)
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
ui <- fluidPage(
uiOutput("pic")
)
server <- function(input, output){
output$pic <- renderUI({
# showing three random pictures from the www folder in the photos box
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
img(src=files[1], height="250px", width="100%")
# fluidRow(
#   column(4, img(src=files[1], height="250px", width="100%")),
#   column(4, img(src=files[2], height="250px", width="100%")),
#   column(4, img(src=files[3], height="250px", width="100%"))
# )
})
}
shinyApp(ui, server)
ui <- fluidPage(
uiOutput("pic")
)
server <- function(input, output){
output$pic <- renderUI({
# showing three random pictures from the www folder in the photos box
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
box(img(src=files[1], height="250px", width="100%"))
# fluidRow(
#   column(4, img(src=files[1], height="250px", width="100%")),
#   column(4, img(src=files[2], height="250px", width="100%")),
#   column(4, img(src=files[3], height="250px", width="100%"))
# )
})
}
server <- function(input, output){
output$pic <- renderUI({
# showing three random pictures from the www folder in the photos box
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
box(img(src=image, height="250px", width="100%"))
# fluidRow(
#   column(4, img(src=files[1], height="250px", width="100%")),
#   column(4, img(src=files[2], height="250px", width="100%")),
#   column(4, img(src=files[3], height="250px", width="100%"))
# )
})
}
shinyApp(ui, server)
setwd("D:/boschebol_hackathon/boschebol-gehaktbol")
ui <- fluidPage(
uiOutput("pic")
)
server <- function(input, output){
output$pic <- renderUI({
# showing three random pictures from the www folder in the photos box
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
img(src=image, height="250px", width="100%")
# fluidRow(
#   column(4, img(src=files[1], height="250px", width="100%")),
#   column(4, img(src=files[2], height="250px", width="100%")),
#   column(4, img(src=files[3], height="250px", width="100%"))
# )
})
}
shinyApp(ui, server)
runApp('D:/emeli/Documents/shinyCV/ShinyCV.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
df <- as.data.frame(sample(c(200.5,400),20))
df <- as.data.frame(sample(c(200.5:400),20))
View(df)
names(df) <- "current"
df$resistance <- sample(c(10.5:50),20)
df$volt <- sample(c(110.5:170.8),20)
View(df)
plot(y=df$value, type="l",col="limegreen")
plot(y=df$current, type="l",col="limegreen")
plot(x=row.names(df),y=df$current, type="l",col="limegreen")
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,300))
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
runApp('try_out_shiny.R')
df <- NULL
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('D:/ifm-al1100/r_live_plot_iolink_data.r')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
df <<- dat
runApp('try_out_shiny.R')
library(shiny); runApp('try_out_shiny.R')
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
setwd("D:/boschebol_hackathon/boschebol-gehaktbol")
df <- NULL
ui <- fluidPage(
fluidRow(
box(plotlyOutput("weld")),
box(uiOutput("pic"))),
plotOutput("sensor"),
actionButton("refresh","Refresh", icon("refresh"))
)
server <- function(input, output){
readWeld <- reactive({
#invalidateLater(1000)
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
df <<- rbind(df,dat)
return(df)
})
output$weld <- plotlyOutput({
df <- readWeld()
print(df)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
output$pic <- renderUI({
input$refresh
isolate({
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
tags$img(src=image)
})
})
}
shinyApp(ui, server)
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
df <<- rbind(df,dat)
df <- data.frame()
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
df <<- rbind(df,dat)
runApp('try_out_shiny.R')
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
setwd("D:/boschebol_hackathon/boschebol-gehaktbol")
ui <- fluidPage(
fluidRow(
box(plotlyOutput("weld")),
box(uiOutput("pic"))),
plotOutput("sensor"),
actionButton("refresh","Refresh", icon("refresh"))
)
server <- function(input, output){
readWeld <- reactive({
#invalidateLater(1000)
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
#df <<- rbind(df,dat)
return(dat)
})
output$weld <- plotlyOutput({
df <- readWeld()
print(df)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
output$pic <- renderUI({
input$refresh
isolate({
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
tags$img(src=image)
})
})
}
shinyApp(ui, server)
server <- function(input, output){
readWeld <- reactive({
invalidateLater(1000)
dat <- as.data.frame(sample(c(50.5:300),20))
names(dat) <- "current"
dat$resistance <- sample(c(70.5:150),20)
dat$volt <- sample(c(110.5:170.8),20)
#df <<- rbind(df,dat)
return(dat)
})
output$weld <- plotlyOutput({
df <- readWeld()
print(df)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
output$pic <- renderUI({
input$refresh
isolate({
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
tags$img(src=image)
})
})
}
shinyApp(ui, server)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
setwd("D:/boschebol_hackathon/boschebol-gehaktbol")
ui <- fluidPage(
fluidRow(
box(plotlyOutput("weld")),
box(uiOutput("pic"))),
plotOutput("sensor"),
actionButton("refresh","Refresh", icon("refresh"))
)
server <- function(input, output){
readWeld <- reactive({
invalidateLater(1000)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
#df <<- rbind(df,df)
return(df)
})
output$weld <- plotlyOutput({
df <- readWeld()
print(df)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
output$pic <- renderUI({
input$refresh
isolate({
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
tags$img(src=image)
})
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
box(plotlyOutput("weld")),
box(uiOutput("pic"))),
plotOutput("sensor"),
actionButton("refresh","Refresh", icon("refresh"))
)
server <- function(input, output){
readWeld <- reactive({
invalidateLater(1000)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
#df <<- rbind(df,df)
return(df)
})
output$weld <- plotlyOutput({
df <- readWeld()
print(df)
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
output$pic <- renderUI({
input$refresh
isolate({
num <- sample(c(1,2),1)
files <- list.files("www/")
image <- files[num]
tags$img(src=image)
})
})
}
shinyApp(ui, server)
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
setwd("D:/boschebol_hackathon/boschebol-gehaktbol")
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
ui <- fluidPage(
fluidRow(
box(plotOutput("weld")),
box(uiOutput("pic"))),
plotOutput("sensor"),
actionButton("refresh","Refresh", icon("refresh"))
)
library(shiny)
library(httr)
library(jsonlite)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
ui <- fluidPage(
plotOutput("weld")
)
server <- function(input, output){
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
}
shinyApp(ui, server)
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
library(shiny)
library(httr)
library(jsonlite)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
ui <- fluidPage(
plotOutput("weld")
)
server <- function(input, output){
output$weld <- renderPlot({
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
}
shinyApp(ui, server)
server <- function(input, output){
dat <- reactive({
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
return(df)
})
output$weld <- renderPlot({
df <- dat()
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
}
shinyApp(ui, server)
server <- function(input, output){
dat <- reactive({
invalidateLater(300)
df <- as.data.frame(sample(c(50.5:300),20))
names(df) <- "current"
df$resistance <- sample(c(70.5:150),20)
df$volt <- sample(c(110.5:170.8),20)
return(df)
})
output$weld <- renderPlot({
df <- dat()
plot(x=row.names(df),y=df$current, type="l",col="limegreen", ylim = c(1,350))
lines(x=row.names(df),y=df$resistance,col="red")
lines(x=row.names(df),y=df$volt)
})
}
shinyApp(ui, server)
runApp('try_out_shiny_.R')
runApp('try_out_shiny_.R')
runApp('try_out_shiny_.R')
runApp('try_out_shiny_.R')
ui <- dashboardPage(
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardPage(
fluidRow(
box(plotOutput("weld")),
box(uiOutput("pic"))),
actionButton("refresh","Refresh", icon("refresh"))
)
)
runApp('try_out_shiny_.R')
runApp('try_out_shiny_.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
runApp('try_out_shiny.R')
